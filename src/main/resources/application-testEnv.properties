logging.path=/user/local/log
logging.level.com.favorites=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
#多数据源
spring.datasource.first.jdbc-url=jdbc:sqlserver://47.106.230.151:1433;DatabaseName=formSystem_test
spring.datasource.first.username=sa
spring.datasource.first.password=Lumia830
spring.datasource.first.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.second.jdbc-url=jdbc:sqlserver://47.106.230.151:1433;DatabaseName=test
spring.datasource.second.username=sa
spring.datasource.second.password=Lumia830
spring.datasource.second.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
#update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#dialect 主要是指定生成表名的存储引擎为 InnoDBD
#show-sql 是否打印出自动生成的 SQL，方便调试的时候查看
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2008Dialect
spring.jpa.properties.hibernate.jdbc.time_zone=Hongkong
spring.jpa.show-sql=true
spring.datasource.initialization-mode=EMBEDDED
LOG_PATH=D:\\apache-tomcat-9.0-8895\\logs\\
LOG_LEVEL=info
LOG_NAME=aa


archiveFormFilePath=C:\\qiu\\archiveFile
